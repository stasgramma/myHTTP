package main

import (
	"log"

	"github.com/introxx/myhttp/config"
	"github.com/introxx/myhttp/internal/database"
	"github.com/introxx/myhttp/internal/models"
	"github.com/introxx/myhttp/internal/routes"

	_ "github.com/introxx/myhttp/docs" // –¥–ª—è Swagger
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// @title           MyApp API
// @version         1.0
// @description     –ü—Ä–∏–º–µ—Ä –±—ç–∫–µ–Ω–¥–∞ –Ω–∞ Go —Å Gin –∏ Swagger
// @host            localhost:8080
// @BasePath        /
func main() {
	cfg := config.LoadConfig()
	database.Connect(cfg)

	// –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	createTestUser()

	r := routes.SetupRouter()

	// === üìò Swagger UI ===
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	log.Println("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
	log.Println("üìò Swagger –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:8080/swagger/index.html")

	if err := r.Run(":8080"); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}

// –í–Ω–µ main() –æ–±—ä—è–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
func createTestUser() {
	user := models.User{
		Name:  "Bob",
		Email: "bob@example.com",
		Role:  "user",
	}

	// –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
	if err := user.HashPassword("123456"); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è: %v", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
	if err := database.DB.Create(&user).Error; err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}

	log.Println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:", user.Email)
	log.Println("–ü–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–µ—à–µ–º):", user.Password)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ CheckPassword
	log.Println("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è 123456:", user.CheckPassword("123456")) // true
	log.Println("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è wrong:", user.CheckPassword("wrong"))   // false
}
